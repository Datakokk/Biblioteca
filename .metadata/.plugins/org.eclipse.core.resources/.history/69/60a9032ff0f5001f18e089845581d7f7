package com.biblioteca.servicio;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;

import com.biblioteca.dao.UsuarioDAO;
import com.biblioteca.modelo.Usuario;
import org.mindrot.jbcrypt.BCrypt;

public class UsuarioServicio {

	private UsuarioDAO usuarioDAO;
	
	public UsuarioServicio(Connection conexion) {
		this.usuarioDAO = new UsuarioDAO(conexion);
	}
	
	public Usuario obtenerUsuarioPorEmail(String email) throws SQLException {
        return usuarioDAO.obtenerUsuarioPorEmail(email); // Llama al DAO para buscar el usuario
    }
	
	public void registrarUsuario(Usuario usuario) throws SQLException {
		if(usuarioDAO.obtenerUsuarioPorEmail(usuario.getEmail()) != null) {
			throw new SQLException("El email ya esta registrado");
		}
		
		// üîê Hashear la contrase√±a antes de guardarla
        String hashedPassword = BCrypt.hashpw(usuario.getPassword(), BCrypt.gensalt());
        usuario.setPassword(hashedPassword);

		usuarioDAO.agregarUsuario(usuario);
	}
	
	public Usuario autenticarUsuario(String email, String password) throws SQLException {
        Usuario usuario = usuarioDAO.obtenerUsuarioPorEmail(email);

        if (usuario != null && BCrypt.checkpw(password, usuario.getPassword())) {
            return usuario; // ‚úÖ Contrase√±a correcta
        }
        return null; // ‚ùå Credenciales incorrectas
    }
	
	public Usuario obtenerUsuarioEmail(String email) throws SQLException {
		return usuarioDAO.obtenerUsuarioPorEmail(email);
	}
	
	public List<Usuario> listarUsuarios() throws SQLException{
		return usuarioDAO.listarUsuarios();
	}
}