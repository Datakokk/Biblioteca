package com.biblioteca.gui;

import com.biblioteca.dao.PrestamoDAO;
import com.biblioteca.modelo.Libro;
import com.biblioteca.modelo.Prestamo;
import com.biblioteca.modelo.Usuario;
import com.biblioteca.servicio.LibroServicio;
import com.biblioteca.servicio.PrestamoServicio;
import com.biblioteca.util.ConexionJDBC;

import javax.swing.*;
import java.awt.*;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;

public class UsuarioFrame extends JFrame {
    private Usuario usuario;
    private LibroServicio libroServicio;
    private PrestamoServicio prestamoServicio;

    public UsuarioFrame(Usuario usuario, LibroServicio libroServicio, PrestamoServicio prestamoServicio) {
        this.usuario = usuario;
        this.libroServicio = libroServicio;
        this.prestamoServicio = prestamoServicio;

        setTitle("Panel de Usuario - Biblioteca");
        setSize(600, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setLayout(new BorderLayout());

        // Barra de men√∫
        JMenuBar menuBar = new JMenuBar();

        // Men√∫ de libros
        JMenu librosMenu = new JMenu("Libros");
        JMenuItem listarLibros = new JMenuItem("Ver Libros Disponibles");
        JMenuItem prestarLibro = new JMenuItem("Realizar Pr√©stamo");
        JMenuItem devolverLibro = new JMenuItem("Devolver Libro");
        JMenuItem verPrestamos = new JMenuItem("Ver Mis Pr√©stamos");

        librosMenu.add(listarLibros);
        librosMenu.add(prestarLibro);
        librosMenu.add(devolverLibro);
        librosMenu.add(verPrestamos);

        // Men√∫ de sesi√≥n
        JMenu sesionMenu = new JMenu("Sesi√≥n");
        JMenuItem cerrarSesion = new JMenuItem("Cerrar Sesi√≥n");
        sesionMenu.add(cerrarSesion);

        // Agregar men√∫s a la barra
        menuBar.add(librosMenu);
        menuBar.add(sesionMenu);
        setJMenuBar(menuBar);

        // Acci√≥n para cerrar sesi√≥n
        cerrarSesion.addActionListener(e -> {
            dispose();
            new LoginFrame().setVisible(true);
        });

        // Acciones de los botones
        listarLibros.addActionListener(e -> listarLibros());
        prestarLibro.addActionListener(e -> realizarPrestamo());
        devolverLibro.addActionListener(e -> devolverLibro());
        verPrestamos.addActionListener(e -> verPrestamosActivos());

        // Mensaje de bienvenida
        JLabel bienvenida = new JLabel("Bienvenido, " + usuario.getNombre(), SwingConstants.CENTER);
        add(bienvenida, BorderLayout.CENTER);
    }

    // M√©todo para listar libros disponibles
    private void listarLibros() {
        try {
            List<Libro> libros = libroServicio.listarLibros();
            StringBuilder listaLibros = new StringBuilder("üìö Libros disponibles:\n");
            for (Libro l : libros) {
                if (l.getEstado().equalsIgnoreCase("disponible")) {
                    listaLibros.append(l.getIdLibro()).append(" - ").append(l.getTitulo()).append(" de ").append(l.getAutor()).append("\n");
                }
            }
            JOptionPane.showMessageDialog(this, listaLibros.toString());
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al listar libros: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // M√©todo para realizar un pr√©stamo
    private void realizarPrestamo() {
        try {
            String idLibroStr = JOptionPane.showInputDialog(this, "Ingrese el ID del libro a prestar:");
            if (idLibroStr != null) {
                int idLibro = Integer.parseInt(idLibroStr);

                Prestamo prestamo = new Prestamo();
                prestamo.setIdUsuario(usuario.getIdUsuario());
                prestamo.setIdLibro(idLibro);
                prestamo.setFechaPrestamo(new java.util.Date());

                prestamoServicio.registrarPrestamo(prestamo);
                JOptionPane.showMessageDialog(this, "‚úÖ Pr√©stamo realizado con √©xito.");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al registrar el pr√©stamo: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "ID de libro inv√°lido", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // M√©todo para devolver un libro
    private void devolverLibro() {
        try {
            String idPrestamoStr = JOptionPane.showInputDialog(this, "Ingrese el ID del pr√©stamo a devolver:");
            if (idPrestamoStr != null) {
                int idPrestamo = Integer.parseInt(idPrestamoStr);

                prestamoServicio.devolverLibro(idPrestamo);
                JOptionPane.showMessageDialog(this, "üìå Libro devuelto con √©xito.");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al devolver el libro: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "ID de pr√©stamo inv√°lido", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // M√©todo para ver pr√©stamos activos
    private void verPrestamosActivos() {
        try {
            List<Prestamo> prestamos = prestamoServicio.obtenerPrestamosActivosPorUsuario(usuario.getIdUsuario());
            StringBuilder listaPrestamos = new StringBuilder("üìå Mis Pr√©stamos Activos:\n");
            for (Prestamo p : prestamos) {
                listaPrestamos.append("üìñ Libro ID: ").append(p.getIdLibro()).append(" | Fecha Pr√©stamo: ").append(p.getFechaPrestamo()).append("\n");
            }
            JOptionPane.showMessageDialog(this, listaPrestamos.toString());
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al obtener pr√©stamos activos: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            try (Connection conexion = ConexionJDBC.obtenerConexion()) {
                Usuario usuarioPrueba = new Usuario();
                usuarioPrueba.setIdUsuario(1);
                usuarioPrueba.setNombre("Usuario de Prueba");

                LibroServicio libroServicio = new LibroServicio(conexion);
                PrestamoServicio prestamoServicio = new PrestamoServicio(new PrestamoDAO(conexion));

                new UsuarioFrame(usuarioPrueba, libroServicio, prestamoServicio).setVisible(true);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        });
    }
}
